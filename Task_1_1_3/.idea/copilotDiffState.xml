<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/test/java/ru/nsu/dashkovskii/ScannerTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/ru/nsu/dashkovskii/ScannerTest.java" />
              <option name="originalContent" value="package ru.nsu.dashkovskii;&#10;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;/**&#10; * Тестовый класс для проверки функциональности класса Scanner.&#10; */&#10;public class ScannerTest {&#10;&#10;    /**&#10;     * Тестирует приватный метод isValidVariable с помощью рефлексии.&#10;     */&#10;    @Test&#10;    public void testIsValidVariableName() {&#10;        Scanner scanner = new Scanner();&#10;&#10;        // Используем рефлексию для тестирования приватного метода&#10;        try {&#10;            java.lang.reflect.Method method = Scanner.class&#10;                    .getDeclaredMethod(&quot;isValidVariable&quot;, String.class);&#10;            method.setAccessible(true);&#10;&#10;            assertTrue((Boolean) method.invoke(scanner, &quot;x&quot;));&#10;            assertTrue((Boolean) method.invoke(scanner, &quot;foo&quot;));&#10;            assertTrue((Boolean) method.invoke(scanner, &quot;var123&quot;));&#10;            assertTrue((Boolean) method.invoke(scanner, &quot;myVariable&quot;));&#10;&#10;            assertFalse((Boolean) method.invoke(scanner, &quot;&quot;));&#10;            assertFalse((Boolean) method.invoke(scanner, &quot;123&quot;));&#10;            assertFalse((Boolean) method.invoke(scanner, &quot;123abc&quot;));&#10;            assertFalse((Boolean) method.invoke(scanner, &quot;var!&quot;));&#10;            assertFalse((Boolean) method.invoke(scanner, &quot;my-var&quot;));&#10;            assertFalse((Boolean) method.invoke(scanner, &quot;my var&quot;));&#10;&#10;        } catch (Exception e) {&#10;            fail(&quot;Ошибка при тестировании isValidVariable: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Тестирует создание экземпляра Scanner.&#10;     */&#10;    @Test&#10;    public void testScannerCreation() {&#10;        Scanner scanner = new Scanner();&#10;        assertNotNull(scanner);&#10;    }&#10;&#10;    // Примечание: Методы readExpression(), readAssignments() и readDiffVariable()&#10;    // сложно тестировать unit-тестами, так как они требуют пользовательского ввода.&#10;    // Для их тестирования потребовались бы моки или интеграционные тесты.&#10;}&#10;" />
              <option name="updatedContent" value="package ru.nsu.dashkovskii;&#10;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import static org.junit.jupiter.api.Assertions.assertFalse;&#10;import static org.junit.jupiter.api.Assertions.assertNotNull;&#10;import static org.junit.jupiter.api.Assertions.assertTrue;&#10;import static org.junit.jupiter.api.Assertions.fail;&#10;&#10;/**&#10; * Тестовый класс для проверки функциональности класса Scanner.&#10; */&#10;public class ScannerTest {&#10;&#10;    /**&#10;     * Тестирует приватный метод isValidVariable с помощью рефлексии.&#10;     */&#10;    @Test&#10;    public void testIsValidVariableName() {&#10;        Scanner scanner = new Scanner();&#10;&#10;        // Используем рефлексию для тестирования приватного метода&#10;        try {&#10;            java.lang.reflect.Method method = Scanner.class&#10;                    .getDeclaredMethod(&quot;isValidVariable&quot;, String.class);&#10;            method.setAccessible(true);&#10;&#10;            assertTrue((Boolean) method.invoke(scanner, &quot;x&quot;));&#10;            assertTrue((Boolean) method.invoke(scanner, &quot;foo&quot;));&#10;            assertTrue((Boolean) method.invoke(scanner, &quot;var123&quot;));&#10;            assertTrue((Boolean) method.invoke(scanner, &quot;myVariable&quot;));&#10;&#10;            assertFalse((Boolean) method.invoke(scanner, &quot;&quot;));&#10;            assertFalse((Boolean) method.invoke(scanner, &quot;123&quot;));&#10;            assertFalse((Boolean) method.invoke(scanner, &quot;123abc&quot;));&#10;            assertFalse((Boolean) method.invoke(scanner, &quot;var!&quot;));&#10;            assertFalse((Boolean) method.invoke(scanner, &quot;my-var&quot;));&#10;            assertFalse((Boolean) method.invoke(scanner, &quot;my var&quot;));&#10;&#10;        } catch (Exception e) {&#10;            fail(&quot;Ошибка при тестировании isValidVariable: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Тестирует создание экземпляра Scanner.&#10;     */&#10;    @Test&#10;    public void testScannerCreation() {&#10;        Scanner scanner = new Scanner();&#10;        assertNotNull(scanner);&#10;    }&#10;&#10;    // Примечание: Методы readExpression(), readAssignments() и readDiffVariable()&#10;    // сложно тестировать unit-тестами, так как они требуют пользовательского ввода.&#10;    // Для их тестирования потребовались бы моки или интеграционные тесты.&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>